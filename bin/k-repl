#!/usr/bin/env python3

import argparse
import sys
import os
import subprocess
import tempfile
import readline


def get_args():
    parser = argparse.ArgumentParser(
        description="Run a REPL for a language defined in K")
    parser.add_argument("directory", help="Path to kompiled directory")
    parser.add_argument("--compile", action="store_true",
                        help="Compile an extension module")
    parser.add_argument("--verbose", action="store_true")
    return parser.parse_args()


def load_kore_module(kompiled_dir):
    # This is a bit of a hack to make the module loadable from the kompiled
    # directory, rather than having to have its path known statically.
    full_path = os.path.realpath(kompiled_dir)
    old_path = sys.path
    sys.path = [full_path]
    try:
        global kore
        import kore
    except ModuleNotFoundError:
        print(
            f"Could not load KORE extension module from {full_path}", file=sys.stderr)
        sys.exit(1)
    finally:
        sys.path = old_path


def parse_to_kore(kompiled_dir, src):
    echo = subprocess.run(
        ["kparse", "-", "--definition", kompiled_dir, "-s", "KItem"],
        input=src.encode("utf-8"), capture_output=True, check=True)
    return echo.stdout


def parse_term(kompiled_dir, src):
    kore_term = parse_to_kore(kompiled_dir, src)

    with tempfile.NamedTemporaryFile() as fp:
        fp.write(kore_term)
        fp.seek(0)
        parser = kore.parser.Parser(fp.name)
        return parser.pattern()


def token(literal, sort):
    sort = kore.ast.CompositeSort(sort)
    dv_sym = kore.ast.Symbol(r"\dv")
    dv_sym.add_formal_argument(sort)
    dv = kore.ast.CompositePattern(dv_sym)
    dv.add_argument(kore.ast.StringPattern(literal))
    return dv


def injection(term, from_sort, to_sort):
    inj_sym = kore.ast.Symbol("inj")
    inj_sym.add_formal_argument(kore.ast.CompositeSort(from_sort))
    inj_sym.add_formal_argument(kore.ast.CompositeSort(to_sort))
    inj = kore.ast.CompositePattern(inj_sym)
    inj.add_argument(term)
    return inj


def construct_interpreter_input(term):
    key = injection(token("$PGM", "SortKConfigVar"),
                    "SortKConfigVar", "SortKItem")

    map_item = kore.ast.CompositePattern("Lbl'UndsPipe'-'-GT-Unds'")
    map_item.add_argument(key)
    map_item.add_argument(term)

    map_unit = kore.ast.CompositePattern("Lbl'Stop'Map")

    map_concat = kore.ast.CompositePattern("Lbl'Unds'Map'Unds'")
    map_concat.add_argument(map_unit)
    map_concat.add_argument(map_item)

    top_cell = kore.ast.CompositePattern("LblinitGeneratedTopCell")
    top_cell.add_argument(map_concat)

    return top_cell


def unparse(kompiled_dir, block):
    with tempfile.NamedTemporaryFile() as fp:
        kore.print_configuration(fp.name, block)
        kast = subprocess.run(["kast", "--definition", kompiled_dir,
                              "-i", "kore", "-o", "pretty", fp.name], capture_output=True)
        return kast.stdout.decode("utf-8")


def launch_kserver():
    return subprocess.Popen(["kserver"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)


def compile_module(kompiled_dir, verbose=False):
    defn = os.path.join(kompiled_dir, "definition.kore")
    dt_dir = os.path.join(kompiled_dir, "dt")

    suffix = subprocess.run(
        ["python3-config", "--extension-suffix"],
        capture_output=True).stdout.decode("utf-8").strip()

    output = os.path.join(kompiled_dir, f"kore{suffix}")

    args = ["llvm-kompile", defn, dt_dir, "python", "-o", output]
    if verbose:
        print(
            f"Compiling python extension:\n  {' '.join(args)}", file=sys.stderr)
    subprocess.run(args)


if __name__ == "__main__":
    args = get_args()

    if args.compile:
        compile_module(args.directory, args.verbose)

    load_kore_module(args.directory)

    server = launch_kserver()

    try:
        while True:
            try:
                src = input("$ ")
                if src:
                    term = parse_term(args.directory, src)
                    inp = construct_interpreter_input(term)

                    block = inp.construct()
                    block = kore.take_steps(-1, block)
                    print(unparse(args.directory, block))
            except subprocess.CalledProcessError as e:
                err = e.stderr.decode("utf-8")
                print(f"Syntax error:\n  {err}")
            except (EOFError, KeyboardInterrupt):
                print()
                break
    finally:
        server.terminate()
